create table public.profiles (
  id uuid not null,
  username text null,
  avatar_url text null,
  role text null default 'user'::text,
  created_at timestamp with time zone null default now(),
  last_sign_in timestamp with time zone null default now(),
  constraint profiles_pkey primary key (id),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id) on delete CASCADE,
  constraint profiles_role_check check (
    (
      role = any (
        array[
          'admin'::text,
          'moderator'::text,
          'user'::text,
          'guest'::text
        ]
      )
    )
  ),
  constraint username_length check ((char_length(username) >= 3))
) TABLESPACE pg_default;


create table public.profile_conversion (
  id integer generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  profile_id uuid null,
  http_referer text null,
  headers text null,
  constraint profile_conversion_pkey primary key (id)
) TABLESPACE pg_default;

create table public.forum_users (
  id uuid not null default gen_random_uuid (),
  profile_id uuid null,
  username text not null,
  email text not null,
  password_hash text null,
  avatar_url text null,
  bio text null,
  role text not null default 'user'::text,
  is_banned boolean not null default false,
  is_muted boolean not null default false,
  registration_ip inet null,
  registration_user_agent text null,
  trust_score integer not null default 0,
  privacy_opt_out boolean not null default false,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  is_approved_to_post boolean not null default false,
  constraint forum_users_pkey primary key (id),
  constraint forum_users_email_key unique (email),
  constraint forum_users_username_key unique (username),
  constraint forum_users_profile_id_fkey foreign KEY (profile_id) references profiles (id) on delete set null
) TABLESPACE pg_default;

create table public.forum_categories (
  id bigserial not null,
  parent_id bigint null,
  name text not null,
  description text null,
  is_private boolean not null default false,
  is_locked boolean not null default false,
  sort_order integer not null default 0,
  thread_count integer not null default 0,
  post_count integer not null default 0,
  last_activity_at timestamp with time zone null,
  last_activity_by uuid null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  profile_id uuid null,
  constraint forum_categories_pkey primary key (id),
  constraint forum_categories_last_activity_by_fkey foreign KEY (last_activity_by) references forum_users (id),
  constraint forum_categories_parent_id_fkey foreign KEY (parent_id) references forum_categories (id) on delete set null,
  constraint forum_categories_profile_id_fkey foreign KEY (profile_id) references profiles (id)
) TABLESPACE pg_default;


create table public.forum_threads (
  id bigserial not null,
  category_id bigint not null,
  author_id uuid not null,
  title text not null,
  content text null,
  is_sticky boolean not null default false,
  is_locked boolean not null default false,
  is_private boolean not null default false,
  is_deleted boolean not null default false,
  is_approved boolean not null default true,
  approval_requested boolean not null default false,
  is_spam boolean not null default false,
  is_bot boolean not null default false,
  tags text[] null,
  reply_count integer not null default 0,
  view_count integer not null default 0,
  last_activity_at timestamp with time zone null,
  last_activity_by uuid null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp with time zone null,
  profile_id uuid null,
  views integer not null default 0,
  constraint forum_threads_pkey primary key (id),
  constraint forum_threads_author_id_fkey foreign KEY (author_id) references forum_users (id) on delete set null,
  constraint forum_threads_category_id_fkey foreign KEY (category_id) references forum_categories (id) on delete CASCADE,
  constraint forum_threads_last_activity_by_fkey foreign KEY (last_activity_by) references forum_users (id),
  constraint forum_threads_profile_id_fkey foreign KEY (profile_id) references profiles (id)
) TABLESPACE pg_default;

create index IF not exists idx_forum_threads_category_id on public.forum_threads using btree (category_id) TABLESPACE pg_default;

create index IF not exists idx_forum_threads_author_id on public.forum_threads using btree (author_id) TABLESPACE pg_default;

create table public.forum_spam_events (
  id bigserial not null,
  user_id uuid null,
  ip inet null,
  user_agent text null,
  event_type text not null,
  details jsonb null,
  created_at timestamp with time zone not null default now(),
  constraint forum_spam_events_pkey primary key (id),
  constraint forum_spam_events_user_id_fkey foreign KEY (user_id) references forum_users (id)
) TABLESPACE pg_default;

create table public.forum_reports (
  id bigserial not null,
  reporter_id uuid not null,
  target_type text not null,
  target_id bigint not null,
  reason text null,
  status text not null default 'pending'::text,
  created_at timestamp with time zone not null default now(),
  reviewed_by uuid null,
  reviewed_at timestamp with time zone null,
  constraint forum_reports_pkey primary key (id),
  constraint forum_reports_reporter_id_fkey foreign KEY (reporter_id) references forum_users (id),
  constraint forum_reports_reviewed_by_fkey foreign KEY (reviewed_by) references forum_users (id)
) TABLESPACE pg_default;

create table public.forum_posts (
  id bigserial not null,
  thread_id bigint not null,
  parent_id bigint null,
  author_id uuid not null,
  content text null,
  is_draft boolean not null default false,
  is_approved boolean not null default true,
  approval_requested boolean not null default false,
  is_spam boolean not null default false,
  is_bot boolean not null default false,
  is_deleted boolean not null default false,
  is_hidden boolean not null default false,
  is_private boolean not null default false,
  edit_count integer not null default 0,
  last_edited_at timestamp with time zone null,
  last_edited_by uuid null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp with time zone null,
  profile_id uuid null,
  views integer not null default 0,
  constraint forum_posts_pkey primary key (id),
  constraint forum_posts_author_id_fkey foreign KEY (author_id) references forum_users (id) on delete set null,
  constraint forum_posts_last_edited_by_fkey foreign KEY (last_edited_by) references forum_users (id),
  constraint forum_posts_parent_id_fkey foreign KEY (parent_id) references forum_posts (id) on delete set null,
  constraint forum_posts_profile_id_fkey foreign KEY (profile_id) references profiles (id),
  constraint forum_posts_thread_id_fkey foreign KEY (thread_id) references forum_threads (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_forum_posts_thread_id on public.forum_posts using btree (thread_id) TABLESPACE pg_default;

create index IF not exists idx_forum_posts_parent_id on public.forum_posts using btree (parent_id) TABLESPACE pg_default;

create index IF not exists idx_forum_posts_author_id on public.forum_posts using btree (author_id) TABLESPACE pg_default;

create table public.forum_moderation_log (
  id bigserial not null,
  action text not null,
  target_type text not null,
  target_id bigint null,
  performed_by uuid null,
  reason text null,
  metadata jsonb null,
  created_at timestamp with time zone not null default now(),
  constraint forum_moderation_log_pkey primary key (id),
  constraint forum_moderation_log_performed_by_fkey foreign KEY (performed_by) references forum_users (id)
) TABLESPACE pg_default;


create index IF not exists idx_forum_categories_parent_id on public.forum_categories using btree (parent_id) TABLESPACE pg_default;

create table public.forum_audit_trail (
  id bigserial not null,
  user_id uuid null,
  action text not null,
  target_type text not null,
  target_id bigint null,
  metadata jsonb null,
  created_at timestamp with time zone not null default now(),
  constraint forum_audit_trail_pkey primary key (id),
  constraint forum_audit_trail_user_id_fkey foreign KEY (user_id) references forum_users (id)
) TABLESPACE pg_default;

create table public.forum_approval_queue (
  id bigserial not null,
  target_type text not null,
  target_id bigint not null,
  requested_by uuid null,
  requested_at timestamp with time zone not null default now(),
  status text not null default 'pending'::text,
  reviewed_by uuid null,
  reviewed_at timestamp with time zone null,
  notes text null,
  constraint forum_approval_queue_pkey primary key (id),
  constraint forum_approval_queue_requested_by_fkey foreign KEY (requested_by) references forum_users (id),
  constraint forum_approval_queue_reviewed_by_fkey foreign KEY (reviewed_by) references forum_users (id)
) TABLESPACE pg_default;


create table public.scene (
  scene_id serial not null,
  name text not null,
  description text null,
  location_tags text[] null,
  time_of_day text null,
  temperature_setting text null,
  weather_effects text[] null,
  lighting_setup text[] null,
  props_effects text[] null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint scene_pkey primary key (scene_id)
) TABLESPACE pg_default;

create index IF not exists idx_scene_name on public.scene using btree (name) TABLESPACE pg_default;

create trigger set_scene_updated_at BEFORE
update on scene for EACH row
execute FUNCTION trigger_set_timestamp ();

create table public.scene_media (
  media_id serial not null,
  scene_id integer not null,
  media_name text not null,
  media_url text not null,
  media_type text null default 'audio'::text,
  description text null,
  volume_setting numeric(3, 2) null default 1.00,
  loop boolean null default true,
  play_order integer null default 0,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  isdefault boolean null default true,
  constraint scene_media_pkey primary key (media_id),
  constraint scene_media_scene_id_fkey foreign KEY (scene_id) references scene (scene_id) on delete CASCADE,
  constraint scene_media_volume_setting_check check (
    (
      (volume_setting >= 0.00)
      and (volume_setting <= 1.00)
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_scene_media_scene_id on public.scene_media using btree (scene_id) TABLESPACE pg_default;

create index IF not exists idx_scene_media_media_name on public.scene_media using btree (media_name) TABLESPACE pg_default;

create trigger set_scene_media_updated_at BEFORE
update on scene_media for EACH row
execute FUNCTION trigger_set_timestamp ();
